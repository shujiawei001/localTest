#include "setup/settings.txt"

@testing:case="function_tmprod_T_scalar",exception=1
tmprod(1,1,1)

@testing:case="function_tmprod_T_null",exception=1
tmprod(,1,1)

@testing:case="function_tmprod_T_the_first_NULL",exception=1
tmprod([NULL, 3, 4, 5, 5, 6, 6, 7, 7, 9], 1..10, 3)

@testing:case="function_tmprod_T_not_the_first_NULL",exception=1
tmprod([2, 3, 4, NULL, 5, 6, 6, 7, 7, 9], 1..10, 3)

@testing:case="function_tmprod_T_bool_scalar",exception=1
tmprod(true,1,1)

@testing:case="function_tmprod_T_char_scalar",exception=1
tmprod('a',1,3)

@testing:case="function_tmprod_T_short_scalar",exception=1
tmprod(122h, 1,3)

@testing:case="function_tmprod_T_long_scalar",exception=1
tmprod(122l, 1,3)

@testing:case="function_tmprod_T_date_scalar",exception=1
tmprod(2013.06.13, 1,3)

@testing:case="function_tmprod_T_month_scalar",exception=1
tmprod(2012.06M, 1,3)

@testing:case="function_tmprod_T_float_scalar",exception=1
tmprod(12.1f, 1,3)

@testing:case="function_tmprod_T_double_scalar",exception=1
tmprod(2.1, 1,3)

@testing:case="function_tmprod_T_string_scalar",exception=1
tmprod("Hello", 1,3)

@testing:case="function_tmprod_T_uuid_scalar",exception=1
tmprod(uuid("5d212a78-cc48-e3b1-4235-b4d91473ee87"), 1,3)

@testing:case="function_tmprod_T_code_scalar",exception=1
tmprod(<1+2>, 1,3)

@testing:case="function_tmprod_T_any_scalar",exception=1
tmprod((1,2,3), 1,3)

@testing:case="function_tmprod_T_int128_scalar",exception=1
tmprod(int128("e1671797c52e15f763380b45e841ec32"), 1,3)

@testing:case="function_tmprod_T_ipaddr_scalar",exception=1
tmprod(ipaddr("192.168.1.13"), 1,3)

@testing:case="function_tmprod_T_duration_scalar",exception=1
tmprod(duration("1M"), 1,3)

@testing:case="function_tmprod_T_string_vector",exception=1
tmprod(`A`B`C, 1 2 3,3)

@testing:case="function_tmprod_T_double_vector",exception=1
tmprod([1.12, 2.23, 3.3], 1 2 3, 3)

@testing:case="function_tmprod_T_float_vector",exception=1
tmprod([1.12f, 2.23f, 3.3f], 1 2 3, 3)

@testing:case="function_tmprod_T_NULL_vector",exception=1
tmprod([1, NULL, 3], 1 2 3, 3)

@testing:case="function_tmprod_T_not_ascending_vector",exception=1
tmprod([3, 2, 1], 1 2 3, 3)

@testing:case="function_tmprod_T_matrix",exception=1
tmprod(matrix(int, 2, 3), matrix(int, 2, 3), 3)

@testing:case="function_tmprod_T_set",exception=1
tmprod(set([5,5,3,4]),[1, 2, 3], 3)

@testing:case="function_tmprod_T_table",exception=1
tmprod(table(1..10 as qty), 1..10, 3)

@testing:case="function_tmprod_X_scalar",exception=1
tmprod(1..10, 1, 3)

@testing:case="function_tmprod_X_NULL",exception=1
tmprod(1..10, , 3)

@testing:case="function_tmprod_X_string",exception=1
tmprod(1..10, `A + string(1..10), 3)

@testing:case="function_tmprod_X_bool",exception=1
tmprod(1..10, bool(1..10), 3)

@testing:case="function_tmprod_X_date",exception=1
tmprod(1..10, 2013.06.13 + 1..10, 3)

@testing:case="function_tmprod_X_month",exception=1
tmprod(1..10, 2013.06M + 1..10, 3)

@testing:case="function_tmprod_X_code",exception=1
tmprod(1..10,<1+2>, 3)

@testing:case="function_tmprod_X_uuid",exception=1
tmprod(1..10,take(uuid("5d212a78-cc48-e3b1-4235-b4d91473ee87"), 10), 3)

@testing:case="function_tmprod_X_large_than_T",exception=1
tmprod(1..10,1..11, 3)

@testing:case="function_tmprod_X_matrix",exception=1
tmprod(1..10,1..10$2:5, 3)

@testing:case="function_tmprod_window_null",exception=1
tmprod(1..10,1..10, )

@testing:case="function_tmprod_window_negetive",exception=1
tmprod(1..10,1..10, -3)

@testing:case="function_tmprod_window_0",exception=1
tmprod(1..10,1..10, 0)

@testing:case="function_tmprod_window_string",exception=1
tmprod(1..10,1..10, `A)

@testing:case="function_tmprod_window_vector",exception=1
tmprod(1..10,1..10, [1, 0])

@testing:case="function_tmprod_window_pair",exception=1
tmprod(1..10,1..10,3:5)

@testing:case="function_tmprod_window_date",exception=1
tmprod(1..10,1..10,2012.01.01)

@testing:case="function_tmprod_window_bool",exception=1
tmprod(1..10,1..10,true)

@testing:case="function_tmprod_window_double",exception=1
tmprod(1..10,1..10,1.1)

@testing:case="function_tmprod_window_float",exception=1
tmprod(1..10,1..10,10.1)

@testing:case="function_tmprod_window_matrix",exception=1
tmprod(1..10,1..10,1..6$2:3)

@testing:case="function_tmprod_T_inter_duration_3d",exception=1
tmprod(1..10,1..10,3d)

@testing:case="function_tmprod_T_time_negative",exception=1
tmprod(time(-5..4),1..10,3)

@testing:case="function_tmprod_T_integer_vector"
num1=1..10
num2=char(1..10)
num3=long(1..10)
num4=short(1..10)
num5=-5..4
x1=[52,33,74,49,58,46,88,49,38,45]
x2=[52,NULL,74,49,NULL,46,NULL,49,NULL,45]
x3=take(int(), 10)
x4=1.111 20.48 99.99 0.56 -8.33 20.90 -100 -3.33 -55.6 24.5
x5=1.111 NULL 99.99 0.56 NULL 20.90 -100 NULL -55.6 24.5
x6=take(double(), 10)

assert 1, eqObj(tmprod(num1, x1, 3),[52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 2, eqObj(tmprod(num1, x2, 3),[52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 3, eqObj(tmprod(num1, x3, 3),take(int(), 10))
assert 4, eqObj(tmprod(num1, x4, 3),[1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 5, eqObj(tmprod(num1, x5, 3),[1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 6, eqObj(tmprod(num1, x6, 3),take(double(), 10), 3)

assert 7, eqObj(tmprod(num2, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 8, eqObj(tmprod(num2, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 9, eqObj(tmprod(num2, x3, 3), take(int(), 10), 3)
assert 10, eqObj(tmprod(num2, x4, 3),[1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 11, eqObj(tmprod(num2, x5, 3),[1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 12, eqObj(tmprod(num2, x6, 3),take(double(), 10), 3)

assert 13, eqObj(tmprod(num3, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 14, eqObj(tmprod(num3, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 15, eqObj(tmprod(num3, x3, 3), take(int(), 10), 3)
assert 16, eqObj(tmprod(num3, x4, 3), [1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 17, eqObj(tmprod(num3, x5, 3), [1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 18, eqObj(tmprod(num3, x6, 3), take(double(), 10), 3)

assert 19, eqObj(tmprod(num4, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 20, eqObj(tmprod(num4, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 21, eqObj(tmprod(num4, x3, 3) ,take(int(), 10), 3)
assert 22, eqObj(tmprod(num4, x4, 3), [1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 23, eqObj(tmprod(num4, x5, 3), [1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 24, eqObj(tmprod(num4, x6, 3),take(double(), 10), 3)

assert 25, eqObj(tmprod(num5, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 26, eqObj(tmprod(num5, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 27, eqObj(tmprod(num5, x3, 3), take(int(), 10), 3)
assert 28, eqObj(tmprod(num5, x4, 3), [1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 29, eqObj(tmprod(num5, x5, 3), [1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 30, eqObj(tmprod(num5, x6, 3),take(double(), 10), 3)

@testing:case="function_tmprod_T_temporal_vector"
num1=date(-5..4)
num2=datetime(-5..4)
num3=timestamp(-5..4)
num4=month(-5..4)
num5=time(1..10)
x1=[52,33,74,49,58,46,88,49,38,45]
x2=[52,NULL,74,49,NULL,46,NULL,49,NULL,45]
x3=take(int(), 10)
x4=1.111 20.48 99.99 0.56 -8.33 20.90 -100 -3.33 -55.6 24.5
x5=1.111 NULL 99.99 0.56 NULL 20.90 -100 NULL -55.6 24.5
x6=take(double(), 10)

assert 1, eqObj(tmprod(num1, x1, 3),[52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 2, eqObj(tmprod(num1, x2, 3),[52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 3, eqObj(tmprod(num1, x3, 3),take(int(), 10))
assert 4, eqObj(tmprod(num1, x4, 3),[1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 5, eqObj(tmprod(num1, x5, 3),[1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 6, eqObj(tmprod(num1, x6, 3),take(double(), 10), 3)

assert 7, eqObj(tmprod(num2, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 8, eqObj(tmprod(num2, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 9, eqObj(tmprod(num2, x3, 3), take(int(), 10), 3)
assert 10, eqObj(tmprod(num2, x4, 3),[1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 11, eqObj(tmprod(num2, x5, 3),[1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 12, eqObj(tmprod(num2, x6, 3),take(double(), 10), 3)

assert 13, eqObj(tmprod(num3, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 14, eqObj(tmprod(num3, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 15, eqObj(tmprod(num3, x3, 3), take(int(), 10), 3)
assert 16, eqObj(tmprod(num3, x4, 3), [1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 17, eqObj(tmprod(num3, x5, 3), [1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 18, eqObj(tmprod(num3, x6, 3), take(double(), 10), 3)

assert 19, eqObj(tmprod(num4, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 20, eqObj(tmprod(num4, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 21, eqObj(tmprod(num4, x3, 3) ,take(int(), 10), 3)
assert 22, eqObj(tmprod(num4, x4, 3), [1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 23, eqObj(tmprod(num4, x5, 3), [1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 24, eqObj(tmprod(num4, x6, 3),take(double(), 10), 3)

assert 25, eqObj(tmprod(num5, x1, 3), [52,1716,126984,119658,210308,130732,234784,198352,163856,83790])
assert 26, eqObj(tmprod(num5, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 27, eqObj(tmprod(num5, x3, 3), take(int(), 10), 3)
assert 28, eqObj(tmprod(num5, x4, 3), [1.111,22.75328,2275.10047,1146.765312,-466.43335,-97.49432,17409.7000,6959.7000,-18514.800,4536.12600], 3)
assert 29, eqObj(tmprod(num5, x5, 3), [1.111,1.111,111.08889,55.9944,55.99440,11.704,-2090,-2090,5560,-1362.2000], 3)
assert 30, eqObj(tmprod(num5, x6, 3),take(double(), 10), 3)

@testing:case="function_tmprod_T_integer_vector_all_same"
num1=take(1,10)
num2=char(take(1,10))
num3=long(take(1,10))
num4=short(take(1,10))
num5=-5..4
x1=[2,3,4,9,8,6,7,4,3,5]
x2=[52,NULL,74,49,NULL,46,NULL,49,NULL,45]
x3=take(int(), 10)
x4=1.111 20.48 99.99 0.56 -8.33 20.90 -100 -3.33 -55.6 24.5
x5=1.111 NULL 99.99 0.56 NULL 20.90 -100 NULL -55.6 24.5
x6=take(double(), 10)
print(tmprod(num1, x4, 3))

assert 1, eqObj(tmprod(num1, x1, 3),[2,6,24,216,1728,10368,72576,290304,870912,4354560])
assert 2, eqObj(tmprod(num1, x2, 3),[52,52,3848,188552,188552,8673392,8673392,424996208,424996208,19124829360])
assert 3, eqObj(tmprod(num1, x3, 3),take(int(), 10))
assert 4, eqObj(tmprod(num1, x4, 3),[1.111,22.75328,2275.10047,1274.0563,-10612.888,-221809.373,22180937.2981,-73862521.2028,4106756178.875,100615526382.4382], 3)
assert 5, eqObj(tmprod(num1, x5, 3),[1.111,1.111,111.08889,62.2098,62.2098,1300.1844,-130018.4369,-130018.4369,7229025.0892,177111114.6852], 3)
assert 6, eqObj(tmprod(num1, x6, 3),take(double(), 10), 3)

assert 7, eqObj(tmprod(num2, x1, 3), [2,6,24,216,1728,10368,72576,290304,870912,4354560])
assert 8, eqObj(tmprod(num2, x2, 3), [52,52,3848,188552,188552,8673392,8673392,424996208,424996208,19124829360])
assert 9, eqObj(tmprod(num2, x3, 3), take(int(), 10), 3)
assert 10, eqObj(tmprod(num2, x4, 3),[1.111,22.75328,2275.10047,1274.0563,-10612.888,-221809.373,22180937.2981,-73862521.2028,4106756178.875,100615526382.4382], 3)
assert 11, eqObj(tmprod(num2, x5, 3),[1.111,1.111,111.08889,62.2098,62.2098,1300.1844,-130018.4369,-130018.4369,7229025.0892,177111114.6852], 3)
assert 12, eqObj(tmprod(num2, x6, 3),take(double(), 10), 3)

assert 13, eqObj(tmprod(num3, x1, 3), [2,6,24,216,1728,10368,72576,290304,870912,4354560])
assert 14, eqObj(tmprod(num3, x2, 3), [52,52,3848,188552,188552,8673392,8673392,424996208,424996208,19124829360])
assert 15, eqObj(tmprod(num3, x3, 3), take(int(), 10), 3)
assert 16, eqObj(tmprod(num3, x4, 3), [1.111,22.75328,2275.10047,1274.0563,-10612.888,-221809.373,22180937.2981,-73862521.2028,4106756178.875,100615526382.4382], 3)
assert 17, eqObj(tmprod(num3, x5, 3), [1.111,1.111,111.08889,62.2098,62.2098,1300.1844,-130018.4369,-130018.4369,7229025.0892,177111114.6852], 3)
assert 18, eqObj(tmprod(num3, x6, 3), take(double(), 10), 3)

assert 19, eqObj(tmprod(num4, x1, 3), [2,6,24,216,1728,10368,72576,290304,870912,4354560])
assert 20, eqObj(tmprod(num4, x2, 3), [52,52,3848,188552,188552,8673392,8673392,424996208,424996208,19124829360])
assert 21, eqObj(tmprod(num4, x3, 3) ,take(int(), 10), 3)
assert 22, eqObj(tmprod(num4, x4, 3), [1.111,22.75328,2275.10047,1274.0563,-10612.888,-221809.373,22180937.2981,-73862521.2028,4106756178.875,100615526382.4382], 3)
assert 23, eqObj(tmprod(num4, x5, 3), [1.111,1.111,111.08889,62.2098,62.2098,1300.1844,-130018.4369,-130018.4369,7229025.0892,177111114.6852], 3)
assert 24, eqObj(tmprod(num4, x6, 3),take(double(), 10), 3)

assert 25, eqObj(tmprod(num5, x1, 3), [2,6,24,108,288,432,336,168,84,60])
assert 26, eqObj(tmprod(num5, x2, 3), [52,52,3848,3626,3626,2254,46,2254,49,2205])
assert 27, eqObj(tmprod(num5, x3, 3), take(int(), 10), 3)
assert 28, eqObj(tmprod(num5, x4, 3), [1.111,22.75328,2275.10047,1146.7653,-466.4334,-97.4943,17409.7,6959.7,-18514.8,4536.126], 3)
assert 29, eqObj(tmprod(num5, x5, 3), [1.111,1.111,111.08889,55.9944,55.9944,11.704,-2090,-2090,5560,-1362.2], 3)
assert 30, eqObj(tmprod(num5, x6, 3),take(double(), 10), 3)

@testing:case="function_tmprod_T_integer_vector_different_interval"
num1=[-5, -2, 0, 1, 4, 4, 5, 12, 13, 14]
num2=[-5, -2, 1, 4, 7, 10, 13, 15, 18, 21]
num3=[-5, -3, -1, 1, 3, 5, 7, 9, 11, 13]
num4=[-5, -1, 3, 7, 11, 11, 15, 15, 16, 16]
x1=[0.52,0.23,0.74,0.49,0.14,4,NULL,9,NULL,5]

assert 1, eqObj(tmprod(num1, x1, 3), [0.52,0.23,0.1702,0.3626,0.14,0.56,0.56,9,9,45])
assert 2, eqObj(tmprod(num1, x1, 1), [0.52,0.23,0.74,0.49,0.14,0.56,,9,,5])
assert 3, eqObj(tmprod(num1, x1, 2), [0.52,0.23,0.74,0.3626,0.14,0.56,0.56,9,9,5])
assert 4, eqObj(tmprod(num1, x1, 4), [0.52,0.1196,0.1702,0.083398,0.0686,0.2744,0.56,9,9,45], 3)
assert 5, eqObj(tmprod(num1, x1,10), [0.52,0.12,0.089,0.043,0.006,0.024,0.047,5.04,5.04,45], 3)
assert 6, eqObj(tmprod(num1, x1, 1024), [0.52,0.12,0.089,0.043,0.006,0.024,0.024,0.219,0.219,1.093], 3)

assert 7, eqObj(tmprod(num2, x1, 3), [0.52,0.23,0.74,0.49,0.14,4,,9,,5])
assert 8, eqObj(tmprod(num2, x1, 2), [0.52,0.23,0.74,0.49,0.14,4,,9,,5])
assert 9, eqObj(tmprod(num2, x1, 1), [0.52,0.23,0.74,0.49,0.14,4,,9,,5])
assert 10, eqObj(tmprod(num2, x1, 4), [0.52,0.12,0.17,0.363,0.069,0.56,4,9,9,5], 3)
assert 11, eqObj(tmprod(num2, x1, 1024), [0.52,0.12,0.089,0.043,0.006,0.024,0.024,0.219,0.219,1.093], 3)

assert 12, eqObj(tmprod(num3, x1, 3), [0.52,0.12,0.17,0.363,0.069,0.56,4,9,9,5], 3)
assert 13, eqObj(tmprod(num3, x1, 2), [0.52,0.23,0.74,0.49,0.14,4,,9,,5],3)
assert 14, eqObj(tmprod(num3, x1, 1), [0.52,0.23,0.74,0.49,0.14,4,,9,,5],3)
assert 15, eqObj(tmprod(num3, x1, 4), [0.52,0.12,0.17,0.363,0.069,0.56,4,9,9,5],3)
assert 16, eqObj(tmprod(num3, x1, 1024), [0.52,0.12,0.089,0.043,0.006,0.024,0.024,0.219,0.219,1.093], 3)

assert 17, eqObj(tmprod(num4, x1, 3), [0.52,0.23,0.74,0.49,0.14,0.56,,9,9,45], 3)
assert 18, eqObj(tmprod(num4, x1, 2), [0.52,0.23,0.74,0.49,0.14,0.56,,9,9,45], 3)
assert 19, eqObj(tmprod(num4, x1, 1), [0.52,0.23,0.74,0.49,0.14,0.56,,9,,5], 3)
assert 20, eqObj(tmprod(num4, x1, 4), [0.52,0.23,0.74,0.49,0.14,0.56,,9,9,45], 3)
assert 21, eqObj(tmprod(num4, x1, 1024), [0.52,0.12,0.089,0.043,0.006,0.024,0.024,0.219,0.219,1.093], 3)

@testing:case="function_tmprod_T_timestamp_vector_different_interval"
num1=timestamp([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=timestamp([1969.12.19, 1969.12.22, 1969.12.25, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.10, 1970.01.11])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmprod(num1, x1, 3), [52,23,1702,3626,14,644,644,49,49,2205])
assert 2, eqObj(tmprod(num1, x1, 1), [52,23,74,49,14,644,NULL,49,NULL,45], 3)
assert 3, eqObj(tmprod(num1, x1, 2), [52,23,74,3626,14,644,644,49,49,45])
assert 4, eqObj(tmprod(num1, x1, 4), [52,1196,1702,83398,686,31556,644,49,49,2205])
assert 5, eqObj(tmprod(num1, x1,10), [52,1196,88504,4336696,60713744,2792832224,53708312,31556,31556,2205])
assert 6, eqObj(tmprod(num1, x1, 1024), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 7, eqObj(tmprod(num1, x1, 3d),[52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 8, eqObj(tmprod(num1, x1, 3ns), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 9, eqObj(tmprod(num1, x1, 3H), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 10, eqObj(tmprod(num1, x1, 3us), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 11, eqObj(tmprod(num1, x1, 3m), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 12, eqObj(tmprod(num2, x1, 3d), [52,23,74,49,686,644,NULL,49,49,45], 3)
assert 13, eqObj(tmprod(num2, x1, 2w), [52,1196,88504,4336696,60713744,53708312,2335144,1546244,1546244,69580980], 3)
assert 14, eqObj(tmprod(num2, x1, 1M), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 15, eqObj(tmprod(num2, x1, 1y), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 16, eqObj(tmprod(num2, x1, 2B), [52,1196,74,49,686,46,46,49,,45], 3)

@testing:case="function_tmprod_T_date_vector_different_interval"
num1=date([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=date([1969.12.19, 1969.12.22, 1969.12.25, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.10, 1970.01.11])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmprod(num1, x1, 3), [52,23,1702,3626,14,644,644,49,49,2205])
assert 2, eqObj(tmprod(num1, x1, 1), [52,23,74,49,14,644,NULL,49,NULL,45], 3)
assert 3, eqObj(tmprod(num1, x1, 2), [52,23,74,3626,14,644,644,49,49,45])
assert 4, eqObj(tmprod(num1, x1, 4), [52,1196,1702,83398,686,31556,644,49,49,2205])
assert 5, eqObj(tmprod(num1, x1,10), [52,1196,88504,4336696,60713744,2792832224,53708312,31556,31556,2205])
assert 6, eqObj(tmprod(num1, x1, 1024), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 7, eqObj(tmprod(num1, x1, 3d), [52,23,1702,3626,14,644,644,49,49,2205], 3)
assert 8, eqObj(tmprod(num1, x1, 3ns), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 9, eqObj(tmprod(num1, x1, 3H), [52,23,74,49,14,46,NULL,49,NULL,45], 3)
assert 10, eqObj(tmprod(num1, x1, 3us), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 11, eqObj(tmprod(num1, x1, 3m), [52,23,74,49,14,46,NULL,49,NULL,45], 3)

assert 12, eqObj(tmprod(num2, x1, 3d), [52,23,74,49,686,644,NULL,49,49,45], 3)
assert 13, eqObj(tmprod(num2, x1, 2w), [52,1196,88504,4336696,60713744,53708312,2335144,1546244,1546244,69580980], 3)
assert 14, eqObj(tmprod(num2, x1, 1M), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 15, eqObj(tmprod(num2, x1, 1y), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 16, eqObj(tmprod(num2, x1, 2B), [52,1196,74,49,686,46,46,49,,45], 3)

@testing:case="function_tmprod_T_datetime_vector_different_interval"
num1=datetime([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=datetime([1969.12.19, 1969.12.22, 1969.12.25, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.10, 1970.01.11])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmprod(num1, x1, 3), [52,23,1702,3626,14,644,644,49,49,2205])
assert 2, eqObj(tmprod(num1, x1, 1), [52,23,74,49,14,644,NULL,49,NULL,45], 3)
assert 3, eqObj(tmprod(num1, x1, 2), [52,23,74,3626,14,644,644,49,49,45])
assert 4, eqObj(tmprod(num1, x1, 4), [52,1196,1702,83398,686,31556,644,49,49,2205])
assert 5, eqObj(tmprod(num1, x1,10), [52,1196,88504,4336696,60713744,2792832224,53708312,31556,31556,2205])
assert 6, eqObj(tmprod(num1, x1, 1024), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 7, eqObj(tmprod(num1, x1, 3d), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 8, eqObj(tmprod(num1, x1, 3ns), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 9, eqObj(tmprod(num1, x1, 3H), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 10, eqObj(tmprod(num1, x1, 3us), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 11, eqObj(tmprod(num1, x1, 3m), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 12, eqObj(tmprod(num2, x1, 3d), [52,23,74,49,686,644,NULL,49,49,45], 3)
assert 13, eqObj(tmprod(num2, x1, 2w), [52,1196,88504,4336696,60713744,53708312,2335144,1546244,1546244,69580980], 3)
assert 14, eqObj(tmprod(num2, x1, 1M), [52,1196,88504,4336696,60713744,46,NULL,49,NULL,45], 3)
assert 15, eqObj(tmprod(num2, x1, 1y), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 16, eqObj(tmprod(num2, x1, 2B), [52,1196,74,49,686,46,46,49,,45], 3)

@testing:case="function_tmprod_T_time_vector_different_interval"
num1=time([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmprod(num1, x1, 3), [52,1196,88504,49,686,31556,31556,1546244,2254,45], 3)
assert 2, eqObj(tmprod(num1, x1, 1), [52,1196,74,49,686,46,NULL,49,NULL,45])
assert 3, eqObj(tmprod(num1, x1, 2), [52,1196,74,49,686,31556,46,2254,49,45])
assert 4, eqObj(tmprod(num1, x1, 4), [52,1196,88504,49,686,31556,31556,1546244,1546244,2205])
assert 5, eqObj(tmprod(num1, x1,10), [52,1196,88504,4336696,60713744,2792832224,2335144,114422056,114422056,69580980], 3)
assert 6, eqObj(tmprod(num1, x1, 1024), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 7, eqObj(tmprod(num1, x1, 3d), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 8, eqObj(tmprod(num1, x1, 3ns), [52,23,74,49,14,46,NULL,49,,45])
assert 9, eqObj(tmprod(num1, x1, 3H), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 10, eqObj(tmprod(num1, x1, 3us), [52,23,74,49,14,46,NULL,49,,45])
assert 11, eqObj(tmprod(num1, x1, 3m), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 12, eqObj(tmprod(num2, x1, 3d), [52,23,74,49,686,644,NULL,49,49,45])
assert 13, eqObj(tmprod(num2, x1, 2w), [52,1196,88504,4336696,60713744,53708312,2335144,1546244,1546244,69580980], 3)
assert 14, eqObj(tmprod(num2, x1, 1M), [52,1196,88504,4336696,60713744,46,,49,,45], 3)
assert 15, eqObj(tmprod(num2, x1, 1y), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 16, eqObj(tmprod(num2, x1, 2B), [52,1196,74,49,686,46,46,49,NULL,45])

@testing:case="function_tmprod_T_time_vector_different_interval"
num1=time([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmprod(num1, x1, 3), [52,1196,88504,49,686,31556,31556,1546244,2254,45], 3)
assert 2, eqObj(tmprod(num1, x1, 1), [52,1196,74,49,686,46,NULL,49,NULL,45])
assert 3, eqObj(tmprod(num1, x1, 2), [52,1196,74,49,686,31556,46,2254,49,45], 2)
assert 4, eqObj(tmprod(num1, x1, 4), [52,1196,88504,49,686,31556,31556,1546244,1546244,2205], 3)
assert 5, eqObj(tmprod(num1, x1,10), [52,1196,88504,4336696,60713744,2792832224,2335144,114422056,114422056,69580980], 3)
assert 6, eqObj(tmprod(num1, x1, 1024), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 7, eqObj(tmprod(num1, x1, 3d), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 8, eqObj(tmprod(num1, x1, 3ns), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 9, eqObj(tmprod(num1, x1, 3H), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 10, eqObj(tmprod(num1, x1, 3us), [52,23,74,49,14,46,NULL,49,NULL,45])
assert 11, eqObj(tmprod(num1, x1, 3m), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)

assert 12, eqObj(tmprod(num2, x1, 3d), [52,23,74,49,686,644,NULL,49,49,45])
assert 13, eqObj(tmprod(num2, x1, 2w), [52,1196,88504,4336696,60713744,53708312,2335144,1546244,1546244,69580980], 3)
assert 14, eqObj(tmprod(num2, x1, 1M), [52,1196,88504,4336696,60713744,46,NULL,49,NULL,45], 3)
assert 15, eqObj(tmprod(num2, x1, 1y), [52,1196,88504,4336696,60713744,2792832224,2792832224,136848778976,136848778976,6158195053920], 3)
assert 16, eqObj(tmprod(num2, x1, 2B), [52,1196,74,49,686,46,46,49,,45], 3)

@testing:case="function_tmprod_vector_all_NULL_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1024)
	return tmprod(datatype1(1..1024),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmprod_vector_all_NULL_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048576)
	return tmprod(datatype1(1..1048576),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048576)
	return tmprod(datatype1(rand(100,1048576).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_vector_all_NULL_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	return tmprod(datatype1(1..3000000),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	return tmprod(datatype1(rand(100,3000000).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_NULL_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1024)
	x = subarray(x,0:1024)
	return tmprod(datatype1(1..1024),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_NULL_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048576)
	x = subarray(x,0:1048576)
	return tmprod(datatype1(1..1048576),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048576)
	x = subarray(x,0:1048576)
	return tmprod(datatype1(rand(100,1048576).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_NULL_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	return tmprod(datatype1(1..3000000),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	return tmprod(datatype1(rand(100,3000000).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_bigarray_all_NULL_1024"
def f1(datatype1,datatype2) {
	n = 2000000
	x = take(int(), 1024)
	x = bigarray(int,0,n*10).append!(x)
	return tmprod(datatype1(1..1024),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmprod_bigarray_all_NULL_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048576)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	return tmprod(datatype1(1..1048576),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048576)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	return tmprod(datatype1(rand(100,1048576).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_NULL_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	return tmprod(datatype1(1..3000000),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	return tmprod(datatype1(rand(100,3000000).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_vector_all_same_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1024)
	T = take(1,1024)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmprod_vector_all_same_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048576)
	T = take(1,1048576)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048576)
	T = take(1,1048576)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_vector_all_same_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	T = take(1,3000000)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	T = take(1,3000000)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_same_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1024)
	x = subarray(x,0:1024)
	T = take(1,1024)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_same_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048576)
	x = subarray(x,0:1048576)
	T = take(1,1048576)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048576)
	x = subarray(x,0:1048576)
	T = take(1,1048576)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_same_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	T = take(1,3000000)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	T = take(1,3000000)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_bigarray_all_same_1024"
def f1(datatype1,datatype2) {
	n = 2000000
	x = take(int(), 1024)
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,1024)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmprod_bigarray_all_same_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048576)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,1048576)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048576)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,1048576)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_subarray_all_same_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,3000000)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,3000000)
	return tmprod(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmprod_all_datatypes"
def f1(datatype1,datatype2) {
	T=1..10
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=[7,70,140,120,132,1650,18975,138000,93840,16320]
	return eqObj(re,expected,4)
}
assert 1, cross(f1,[int, short, long, date, datehour, timestamp, minute, second, nanotimestamp, nanotime, time, month],[char, int, short, long])

def f11(datatype1,datatype2) {
	T=1..10
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=datatype2([7,70,140,120,132,1650,18975,138000,93840,16320])
	return eqObj(re,expected,4)
}
assert 11, cross(f11,[int, short, long, date, datehour, timestamp, minute, second, nanotimestamp, nanotime, time, month],[float, double])

def f2(datatype1,datatype2) {
	T=1..10
	x=7 NULL 2 6 11 NULL 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=[7,7,14,12,132,66,759,5520,93840,16320]
	return eqObj(re,expected,4)
}
assert 2, cross(f2,[int, short, long, date, datehour, timestamp, minute, second, nanotimestamp, nanotime, time, month],[char, int, short, long])

def f22(datatype1,datatype2) {
	T=1..10
	x=7 NULL 2 6 11 NULL 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=datatype2([7,7,14,12,132,66,759,5520,93840,16320])
	return eqObj(re,expected,4)
}
assert 22, cross(f22,[int, short, long, date, datehour, timestamp, minute, second, nanotimestamp, nanotime, time, month],[float, double])

def f3(datatype1,datatype2) {
	T=1..10
	x=take(double(),10)
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=datatype2(take(double(),10))
	return eqObj(re,expected,4)
}
assert 3, cross(f3,[int, short, long, date, datehour, timestamp, minute, second, nanotimestamp, nanotime, time, month],[char, int, short, long, float, double])

def f4(datatype1,datatype2) {
	T=[-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=[7,10,20,120,132,25,1725,138000,17,204]
	return eqObj(re,expected,4)
}
assert 4, cross(f4,[int, short, long, date, datehour, timestamp, nanotimestamp, month],[char, int, short, long])

def f41(datatype1,datatype2) {
	T=[-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 3)
	expected=datatype2([7,10,20,120,132,25,1725,138000,17,204])
	return eqObj(re,expected,4)
}
assert 41, cross(f41,[int, short, long, date, datehour, timestamp, nanotimestamp, month],[float, double])

def f5(datatype1,datatype2) {
	T=[-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 2)
	expected=[7,10,20,12,66,25,1725,138000,17,12]
	return eqObj(re,expected,4)
}
assert 5, cross(f5,[int, short, long, date, datehour, timestamp, nanotimestamp, month],[char, int, short, long])

def f51(datatype1,datatype2) {
	T=[-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 2)
	expected=datatype2([7,10,20,12,66,25,1725,138000,17,12])
	return eqObj(re,expected,4)
}
assert 51, cross(f51,[int, short, long, date, datehour, timestamp, nanotimestamp, month],[float, double])

def f6(datatype1,datatype2) {
	T=[-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 1024)
	expected=[7,70,140,840,9240,231000,15939000,1275120000,21677040000,260124480000]
	return eqObj(re,expected,4)
}
assert 6, cross(f6,[int, short, long, date, datehour, timestamp, nanotimestamp, month],[char, int, short, long])

def f61(datatype1,datatype2) {
	T=[-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
	x=7 10 2 6 11 25 69 80 17 12
	re=tmprod(datatype1(T), datatype2(x), 1024)
	expected=datatype2([7,70,140,840,9240,231000,15939000,1275120000,21677040000,260124480000])
	return eqObj(re,expected,4)
}
assert 61, cross(f61,[int, short, long, date, datehour, timestamp, nanotimestamp, month],[double])

@testing:case="function_tmprod_array_random_T_1024"
def checktmprod(T, num, siz, window){
	expected=array(long, 0)
	for (i in 0..(siz-1)){
		arr=array(long, 0)
		for(j in i..0){
			if(T[i] - T[j] < window){
				arr.append!(num[j])
			}
		}
		expected.append!(prod(arr))
	}
	return expected
}

T=rand(1024, 1024).sort()
num=take([1,3,2,4,1,6,5,1,3,2],1024)
siz=size(T)
window=3
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 5, eqObj(re, ex, 3)


@testing:case="function_tmprod_array_random_T_timstamp_1024"
T=rand(1969.12.31T23:59:57.123 +1..200000, 1024).sort()
num=take([98,24,96,66,26,87,100,75,63,49],1024)
siz=size(T)
window=3
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmprod_array_random_T_date_1024"
T=rand(1969.01.01+1..200000, 1024).sort()
num=take([98,24,96,66,26,87,100,75,63,49],1024)
siz=size(T)
window=3
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 5, eqObj(re, ex, 3)


@testing:case="function_tmprod_subarray_random_T_1028"
def checktmprod(T, num, siz, window){
	expected=array(double, 0)
	for (i in 0..(siz-1)){
		arr=array(double, 0)
		for(j in i..0){
			if(T[i] - T[j] < window){
				arr.append!(num[j])
			}
		}
		expected.append!(stdp(arr))
	}
	return expected
}

T=rand(1024, 1028).sort()
T=subarray(T,0:1028)
num=take([98,24,96,66,26,87,98,75,63,49],1028)
num=subarray(num,0:1028)
siz=size(T)
window=3
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmprod_subarray_random_T_timstamp_1024"
T=rand(1969.12.31T23:59:57.123 +1..200000, 1024).sort()
T=subarray(T,0:1024)
num=take([98,24,96,66,26,87,100,75,63,49],1024)
num=subarray(num,0:1024)
siz=size(T)
window=3
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmprod_subarray_random_T_date_1024"
T=rand(1969.01.01+1..200000, 1024).sort()
T=subarray(T,0:1024)
num=take([98,24,96,66,26,87,100,75,63,49],1024)
num=subarray(num,0:1024)
siz=size(T)
window=3
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmprod(T, num, siz, window)
re=tmprod(T, num, window)
assert 5, eqObj(re, ex, 3)

/*
@testing:case="function_tmprod_T_1048576"
arr=array(int,0)
for (i in 1..1048576){
	if(i % 2 == 0){
		arr.append!(i)
	}
}
T=take(arr, 1048576).sort()
num=take([1,3,2,4,1,6,5,1,3,2],1048576)
ex=[1, 3,6,24,8,48,30,30,15,30] join (take([6,18,6,24,8,48,30,30,15,30], 1048566))
assert 1, eqObj(tmprod(T, num, 3), ex, 2)

T=take(arr, 1048576).sort()
T=subarray(T,0:1048576)
num=take([98,24,96,66,26,87,98,75,63,49],1048576)
num=subarray(num,0:1048576)
ex=[1, 3,6,24,8,48,30,30,15,30] join (take([6,18,6,24,8,48,30,30,15,30], 1048566))
assert 2, eqObj(tmprod(T, num, 3), ex, 2)

T=take(arr, 1048576).sort()
T=bigarray(int,0,n*10).append!(T)
num=take([98,24,96,66,26,87,98,75,63,49],1048576)
num=bigarray(int,0,n*10).append!(num)
ex=[1, 3,6,24,8,48,30,30,15,30] join (take([6,18,6,24,8,48,30,30,15,30], 1048566))
assert 3, eqObj(tmprod(T, num, 3), ex, 2)

@testing:case="function_tmprod_T_3000000"
arr=array(int,0)
for (i in 1..3000000){
	if(i % 2 == 0){
		arr.append!(i)
	}
}
T=take(arr, 3000000).sort()
num=take([98,24,96,66,26,87,98,75,63,49],3000000)
ex=[1, 3,6,24,8,48,30,30,15,30] join (take([6,18,6,24,8,48,30,30,15,30], 2999990))
assert 1, eqObj(tmprod(T, num, 3), ex, 2)

T=take(arr, 3000000).sort()
T=subarray(T,0:3000000)
num=take([98,24,96,66,26,87,98,75,63,49],3000000)
num=subarray(num,0:3000000)
ex=[1, 3,6,24,8,48,30,30,15,30] join (take([6,18,6,24,8,48,30,30,15,30], 2999990))
assert 2, eqObj(tmprod(T, num, 3), ex, 2)

T=take(arr, 3000000).sort()
T=bigarray(int,0,n*10).append!(T)
num=take([98,24,96,66,26,87,98,75,63,49],3000000)
num=bigarray(int,0,n*10).append!(num)
ex=[1, 3,6,24,8,48,30,30,15,30] join (take([6,18,6,24,8,48,30,30,15,30], 2999990))
assert 3, eqObj(tmprod(T, num, 3), ex, 2)
*/


@testing:case="function_tmprod_table_prepare_value_small_data"
dbName = "dfs://test_tmprod"
if(existsDatabase(dbName)){
	dropDatabase(dbName)
}
t = table(1:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
db = database(directory=dbName, partitionType=VALUE, partitionScheme=2020.01.01..2020.02.20)
pt = db.createPartitionedTable(table=t, tableName=`pt, partitionColumns=`timestamp)
dt = db.createTable(table=t, tableName=`dt)

n = 1000
exTable = table(n:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
dataTable = table(take(`A`B`C`D`E, n) as symbol, rand("name" + string(1..10), n) as name, rand(1..n, n) as id, rand(rand(100.0f,1000) join take(float(),100),n) as price1, rand(rand(100.0,1000) join take(double(),100),n) as price2, take(temporalAdd(2020.01.01T12:23:24.345, (1..n), `h), n) as timestamp, take(2020.01.01 + 1..50, n).sort() as date)

exTable.append!(dataTable)
pt.append!(dataTable)
dt.append!(dataTable)

@testing:case="function_tmprod_dfs_table"
re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3s) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3y) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3m) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2ms) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmprod(date, ID, 3d) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_dt_table"
re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3s) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3y) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3m) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2ms) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmprod(date, ID, 3d) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_dfs_table_context_by"
re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3d) as tmprod from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 2B) as tmprod from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3H) as tmprod from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3M) as tmprod from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_dt_table_context_by"
re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3d) as tmprod from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 2B) as tmprod from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3H) as tmprod from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3M) as tmprod from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_table_prepare_value_bigdata_data"
dbName = "dfs://test_tmprod_big_data"
if(existsDatabase(dbName)){
	dropDatabase(dbName)
}
t = table(1:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
db = database(directory=dbName, partitionType=VALUE, partitionScheme=2020.01.01..2020.02.20)
pt = db.createPartitionedTable(table=t, tableName=`pt, partitionColumns=`timestamp)
dt = db.createTable(table=t, tableName=`dt)

n = 1048580
exTable = table(n:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
dataTable = table(take(`A`B`C`D`E, n) as symbol, rand("name" + string(1..10), n) as name, rand(1..n, n) as id, rand(rand(100.0f,1000) join take(float(),100),n) as price1, rand(rand(100.0,1000) join take(double(),100),n) as price2, take(temporalAdd(2020.01.01T12:23:24.345, (1..1000), `h), n).sort() as timestamp, take(2020.01.01 + 1..50, n).sort() as date)

exTable.append!(dataTable)
pt.append!(dataTable)
dt.append!(dataTable)

@testing:case="function_tmprod_dfs_table_bigdata"
re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3s) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3y) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3m) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2ms) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmprod(date, ID, 3d) as tmprod from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_dt_table_bigdata"
re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3s) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3y) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3m) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2ms) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmprod(date, ID, 3d) as tmprod from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_dfs_table_context_by_bigdata"
re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3d) as tmprod from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 2B) as tmprod from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3H) as tmprod from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmprod(timestamp, ID, 3M) as tmprod from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmprod_dt_table_context_by_bigdata"
re=select tmprod(timestamp, ID, 3d) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3d) as tmprod from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 2B) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 2B) as tmprod from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3H) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3H) as tmprod from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmprod(timestamp, ID, 3M) as tmprod from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmprod(timestamp, ID, 3M) as tmprod from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)
/***
@testing:case="function_tmprod_compare_with_python"
t=loadText(DATA_DIR+ "USPrices_FIRST.csv")
ex=loadText(DATA_DIR+ "TMPROD.csv")
re=select tmprod(date, HEXCD, 10) as tmprod from t 
ex=select HEXCD from ex
assert 1, eqObj(re.values(), ex.values(), 3)







