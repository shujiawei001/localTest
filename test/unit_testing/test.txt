def checkTmstdp(T, num, siz, window){
 expected=array(double, 0)
 for (i in 0..(siz-1)){
  arr=array(double, 0)
  for(j in 0..i){
   if(T[i] - T[j] < window){
    arr.append!(num[j])
   }
  }
  //print(arr)
  expected.append!(med(arr))
 }
 return expected
}

T=take(0..1024, 1028).sort()
num=take(1..10,1028)
siz=size(T)

sum([5, 6, 7, 8, 9 ,10] join take(1..10, 1010) join (1..8))

stdp([5, 6, 7, 8, 9 ,10] join take(1..10, 1010) join (1..8))

window=1023
ex=checkTmstdp(T, num, siz, window)
re=tmmed(T, num, window)

ex==re
assert 3, eqObj(re, ex, 0)

tmsum(0..9, 1..10, 9)
[1,3,6,10,15,21,28,36,45,54]
sum(1..10)
T=[0,1,2,3,4,5,6,7,8,9,9,9]
num=1..12
siz=size(T)

window=9
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 2)

@testing:case="function_tmstdp_array_random_T_1028"
def checkTmstdp(T, num, siz, window){
	expected=array(double, 0)
	for (i in 0..(siz-1)){
		arr=array(double, 0)
		for(j in 0..i){
			if(T[i] - T[j] < window){
				arr.append!(num[j])
			}
		}
		//print(arr)
		expected.append!(stdp(arr))
	}
	return expected
}

T=rand(1..1024, 1028).sort()
num=take([98,24,96,66,26,87,98,75,63,49],1028)
siz=size(T)
window=3
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)




