#include "setup/settings.txt"

@testing:case="function_tmstdp_T_scalar",exception=1
tmstdp(1,1,1)

@testing:case="function_tmstdp_T_all_null",exception=1
tmstdp(,1,1)

@testing:case="function_tmstdp_T_the_first_NULL",exception=1
tmstdp([NULL, 3, 4, 5, 5, 6, 6, 7, 7, 9], 1..10, 3)

@testing:case="function_tmstdp_T_not_the_first_NULL",exception=1
tmstdp([2, 3, 4, NULL, 5, 6, 6, 7, 7, 9], 1..10, 3)

@testing:case="function_tmstdp_T_bool_scalar",exception=1
tmstdp(true,1,1)

@testing:case="function_tmstdp_T_char_scalar",exception=1
tmstdp('a',1,3)

@testing:case="function_tmstdp_T_short_scalar",exception=1
tmstdp(122h, 1,3)

@testing:case="function_tmstdp_T_long_scalar",exception=1
tmstdp(122l, 1,3)

@testing:case="function_tmstdp_T_date_scalar",exception=1
tmstdp(2013.06.13, 1,3)

@testing:case="function_tmstdp_T_month_scalar",exception=1
tmstdp(2012.06M, 1,3)

@testing:case="function_tmstdp_T_float_scalar",exception=1
tmstdp(12.1f, 1,3)

@testing:case="function_tmstdp_T_double_scalar",exception=1
tmstdp(2.1, 1,3)

@testing:case="function_tmstdp_T_string_scalar",exception=1
tmstdp("Hello", 1,3)

@testing:case="function_tmstdp_T_uuid_scalar",exception=1
tmstdp(uuid("5d212a78-cc48-e3b1-4235-b4d91473ee87"), 1,3)

@testing:case="function_tmstdp_T_code_scalar",exception=1
tmstdp(<1+2>, 1,3)

@testing:case="function_tmstdp_T_any_scalar",exception=1
tmstdp((1,2,3), 1,3)

@testing:case="function_tmstdp_T_int128_scalar",exception=1
tmstdp(int128("e1671797c52e15f763380b45e841ec32"), 1,3)

@testing:case="function_tmstdp_T_ipaddr_scalar",exception=1
tmstdp(ipaddr("192.168.1.13"), 1,3)

@testing:case="function_tmstdp_T_duration_scalar",exception=1
tmstdp(duration("1M"), 1,3)

@testing:case="function_tmstdp_T_string_vector",exception=1
tmstdp(`A`B`C, 1 2 3,3)

@testing:case="function_tmstdp_T_double_vector",exception=1
tmstdp([1.12, 2.23, 3.3], 1 2 3, 3)

@testing:case="function_tmstdp_T_float_vector",exception=1
tmstdp([1.12f, 2.23f, 3.3f], 1 2 3, 3)

@testing:case="function_tmstdp_T_NULL_vector",exception=1
tmstdp([1, NULL, 3], 1 2 3, 3)

@testing:case="function_tmstdp_T_not_ascending_vector",exception=1
tmstdp([3, 2, 1], 1 2 3, 3)

@testing:case="function_tmstdp_T_matrix",exception=1
tmstdp(matrix(int, 2, 3), matrix(int, 2, 3), 3)

@testing:case="function_tmstdp_T_set",exception=1
tmstdp(set([5,5,3,4]),[1, 2, 3], 3)

@testing:case="function_tmstdp_T_table",exception=1
tmstdp(table(1..10 as qty), 1..10, 3)

@testing:case="function_tmstdp_X_scalar",exception=1
tmstdp(1..10, 1, 3)

@testing:case="function_tmstdp_X_NULL",exception=1
tmstdp(1..10, , 3)

@testing:case="function_tmstdp_X_string",exception=1
tmstdp(1..10, `A + string(1..10), 3)

@testing:case="function_tmstdp_X_bool",exception=1
tmstdp(1..10, bool(1..10), 3)

@testing:case="function_tmstdp_X_date",exception=1
tmstdp(1..10, 2013.06.13 + 1..10, 3)

@testing:case="function_tmstdp_X_month",exception=1
tmstdp(1..10, 2013.06M + 1..10, 3)

@testing:case="function_tmstdp_X_code",exception=1
tmstdp(1..10,<1+2>, 3)

@testing:case="function_tmstdp_X_uuid",exception=1
tmstdp(1..10,take(uuid("5d212a78-cc48-e3b1-4235-b4d91473ee87"), 10), 3)

@testing:case="function_tmstdp_X_large_than_T",exception=1
tmstdp(1..10,1..11, 3)

@testing:case="function_tmstdp_X_matrix",exception=1
tmstdp(1..10,1..10$2:5, 3)

@testing:case="function_tmstdp_window_null",exception=1
tmstdp(1..10,1..10, )

@testing:case="function_tmstdp_window_negetive",exception=1
tmstdp(1..10,1..10, -3)

@testing:case="function_tmstdp_window_0",exception=1
tmstdp(1..10,1..10, 0)

@testing:case="function_tmstdp_window_string",exception=1
tmstdp(1..10,1..10, `A)

@testing:case="function_tmstdp_window_vector",exception=1
tmstdp(1..10,1..10, [1, 0])

@testing:case="function_tmstdp_window_pair",exception=1
tmstdp(1..10,1..10,3:5)

@testing:case="function_tmstdp_window_date",exception=1
tmstdp(1..10,1..10,2012.01.01)

@testing:case="function_tmstdp_window_bool",exception=1
tmstdp(1..10,1..10,true)

@testing:case="function_tmstdp_window_double",exception=1
tmstdp(1..10,1..10,1.1)

@testing:case="function_tmstdp_window_float",exception=1
tmstdp(1..10,1..10,10.1)

@testing:case="function_tmstdp_window_matrix",exception=1
tmstdp(1..10,1..10,1..6$2:3)

@testing:case="function_tmstdp_T_inter_duration_3d",exception=1
tmstdp(1..10,1..10,3d)

@testing:case="function_tmstdp_T_time_negative",exception=1
tmstdp(time(-5..4),1..10,3)

@testing:case="function_tmstdp_T_time_duration_month",exception=1
num1=time([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]
tmstdp(num1, x1,3M)

@testing:case="function_tmstdp_T_time_duration_year",exception=1
num1=time([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]
tmstdp(num1, x1,3y)

@testing:case="function_tmstdp_T_time_duration_business",exception=1
num1=time([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]
tmstdp(num1, x1,2B)

@testing:case="function_tmstdp_T_minute_duration_month",exception=1
num1=minute([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]
tmstdp(num1, x1,3M)

@testing:case="function_tmstdp_T_minute_duration_year",exception=1
num1=minute([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]
tmstdp(num1, x1,3y)

@testing:case="function_tmstdp_T_integer_vector"
num1=1..10
num2=char(1..10)
num3=long(1..10)
num4=short(1..10)
num5=-5..4
x1=[52,33,74,49,58,46,88,49,38,45]
x2=[52,NULL,74,49,NULL,46,NULL,49,NULL,45]
x3=take(int(), 10)
x4=1.111 20.48 99.99 0.56 -8.33 20.90 -100 -3.33 -55.6 24.5
x5=1.111 NULL 99.99 0.56 NULL 20.90 -100 NULL -55.6 24.5
x6=take(double(), 10)

assert 1, eqObj(tmstdp(num1, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 2, eqObj(tmstdp(num1, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 3, eqObj(tmstdp(num1, x3, 3),take(double(), 10), 3)
assert 4, eqObj(tmstdp(num1, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 5, eqObj(tmstdp(num1, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 6, eqObj(tmstdp(num1, x6, 3),take(double(), 10), 3)

assert 7, eqObj(tmstdp(num2, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 8, eqObj(tmstdp(num2, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 9, eqObj(tmstdp(num2, x3, 3),take(double(), 10), 3)
assert 10, eqObj(tmstdp(num2, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 11, eqObj(tmstdp(num2, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 12, eqObj(tmstdp(num2, x6, 3),take(double(), 10), 3)

assert 13, eqObj(tmstdp(num3, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 14, eqObj(tmstdp(num3, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 15, eqObj(tmstdp(num3, x3, 3),take(double(), 10), 3)
assert 16, eqObj(tmstdp(num3, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 17, eqObj(tmstdp(num3, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 18, eqObj(tmstdp(num3, x6, 3),take(double(), 10), 3)

assert 19, eqObj(tmstdp(num4, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 20, eqObj(tmstdp(num4, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 21, eqObj(tmstdp(num4, x3, 3),take(double(), 10), 3)
assert 22, eqObj(tmstdp(num4, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 23, eqObj(tmstdp(num4, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 24, eqObj(tmstdp(num4, x6, 3),take(double(), 10), 3)

assert 25, eqObj(tmstdp(num5, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 26, eqObj(tmstdp(num5, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 27, eqObj(tmstdp(num5, x3, 3),take(double(), 10), 3)
assert 28, eqObj(tmstdp(num5, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 29, eqObj(tmstdp(num5, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 30, eqObj(tmstdp(num5, x6, 3),take(double(), 10), 3)

@testing:case="function_tmstdp_T_temporal_vector"
num1=date(-5..4)
num2=datetime(-5..4)
num3=timestamp(-5..4)
num4=month(-5..4)
num5=time(1..10)
num6=month(1..10)
num7=minute(1..10)

x1=[52,33,74,49,58,46,88,49,38,45]
x2=[52,NULL,74,49,NULL,46,NULL,49,NULL,45]
x3=take(int(), 10)
x4=1.111 20.48 99.99 0.56 -8.33 20.90 -100 -3.33 -55.6 24.5
x5=1.111 NULL 99.99 0.56 NULL 20.90 -100 NULL -55.6 24.5
x6=take(double(), 10)

assert 1, eqObj(tmstdp(num1, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 2, eqObj(tmstdp(num1, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 3, eqObj(tmstdp(num1, x3, 3),take(double(), 10), 3)
assert 4, eqObj(tmstdp(num1, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 5, eqObj(tmstdp(num1, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 6, eqObj(tmstdp(num1, x6, 3),take(double(), 10), 3)

assert 7, eqObj(tmstdp(num2, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 8, eqObj(tmstdp(num2, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 9, eqObj(tmstdp(num2, x3, 3),take(double(), 10), 3)
assert 10, eqObj(tmstdp(num2, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 11, eqObj(tmstdp(num2, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 12, eqObj(tmstdp(num2, x6, 3),take(double(), 10), 3)

assert 13, eqObj(tmstdp(num3, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 14, eqObj(tmstdp(num3, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 15, eqObj(tmstdp(num3, x3, 3),take(double(), 10), 3)
assert 16, eqObj(tmstdp(num3, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 17, eqObj(tmstdp(num3, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 18, eqObj(tmstdp(num3, x6, 3),take(double(), 10), 3)

assert 19, eqObj(tmstdp(num4, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 20, eqObj(tmstdp(num4, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 21, eqObj(tmstdp(num4, x3, 3),take(double(), 10), 3)
assert 22, eqObj(tmstdp(num4, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 23, eqObj(tmstdp(num4, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 24, eqObj(tmstdp(num4, x6, 3),take(double(), 10), 3)

assert 25, eqObj(tmstdp(num5, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 26, eqObj(tmstdp(num5, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 27, eqObj(tmstdp(num5, x3, 3),take(double(), 10), 3)
assert 28, eqObj(tmstdp(num5, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 29, eqObj(tmstdp(num5, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 30, eqObj(tmstdp(num5, x6, 3),take(double(), 10), 3)

assert 31, eqObj(tmstdp(num6, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 32, eqObj(tmstdp(num6, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 33, eqObj(tmstdp(num6, x3, 3),take(double(), 10), 3)
assert 34, eqObj(tmstdp(num6, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 35, eqObj(tmstdp(num6, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 36, eqObj(tmstdp(num6, x6, 3),take(double(), 10), 3)

assert 37, eqObj(tmstdp(num7, x1, 3),[0,9.5,16.753109,16.872068,10.338708,5.099020,17.663522,19.131126,21.452791,4.546061], 3)
assert 38, eqObj(tmstdp(num7, x2, 3),[0.0,0.0,11.0,12.5,12.5,1.5,0.0,1.5,0.0,2.0], 3)
assert 39, eqObj(tmstdp(num7, x3, 3),take(double(), 10), 3)
assert 40, eqObj(tmstdp(num7, x4, 3),[0,9.684500,42.783765,42.953426,49.101459,12.234471,51.504683,52.227060,39.508933,33.204203], 3)
assert 41, eqObj(tmstdp(num7, x5, 3),[0,0,49.4395,49.7150,49.71506,10.1700,60.4500,60.4500,22.2000,40.0500], 3)
assert 42, eqObj(tmstdp(num7, x6, 3),take(double(), 10), 3)

@testing:case="function_tmstdp_T_integer_vector_all_same"
num1=take(1,10)
num2=char(take(1,10))
num3=long(take(1,10))
num4=short(take(1,10))
num5=-5..4
x1=[52,33,74,49,58,46,88,49,38,45]
x2=[52,NULL,74,49,NULL,46,NULL,49,NULL,45]
x3=take(int(), 10)
x4=1.111 20.48 99.99 0.56 -8.33 20.90 -100 -3.33 -55.6 24.5
x5=1.111 NULL 99.99 0.56 NULL 20.90 -100 NULL -55.6 24.5
x6=take(double(), 10)

assert 1, eqObj(tmstdp(num1, x1, 1), [0.00000,9.500000,16.753109,14.611639,13.287588,12.423097,17.058124,16.182070,16.285266,15.689487], 3)
assert 2, eqObj(tmstdp(num1, x2, 2), [0,0,11,11.1455,11.14550,11.0312,11.0312,10.1784,10.1784,9.8784], 3)
assert 3, eqObj(tmstdp(num1, x3, 3),take(double(), 10), 3)
assert 4, eqObj(tmstdp(num1, x4, 3),[0,9.6845,42.78376,40.89429,39.7436,36.2874,54.44926,51.0063,51.599,49.626], 3)
assert 5, eqObj(tmstdp(num1, x5, 3),[0,0,49.4395,46.7424,46.7424,40.8689,63.7723,63.7723,62.3776,58.6972], 3)
assert 6, eqObj(tmstdp(num1, x6, 3),take(double(), 10), 3)

assert 7, eqObj(tmstdp(num2, x1, 1), [0,9.5,16.753109164172084,14.611639196202457,13.287588193498466,12.423096769056149,17.058123924885013,16.182069552439823,16.285265627038757,15.689486925964144], 3)
assert 8, eqObj(tmstdp(num2, x2, 3),[0,0,11,11.145502331533648,11.145502331533648,11.031205736455104,11.031205736455104,10.178408519999576,10.178408519999576,9.878427675158295], 3)
assert 9, eqObj(tmstdp(num2, x3, 3),take(double(), 10), 3)
assert 10, eqObj(tmstdp(num2, x4, 3),[0,9.684500000000001,42.783764966008618,40.894291932829695,39.743624839211634,36.287436762680762,54.449262607401721,51.006335790118995,51.599367881571737,49.626473101460675], 3)
assert 11, eqObj(tmstdp(num2, x5, 3),[0,0,49.439499999999995,46.742420825912155,46.742420825912155,40.868870613065631,63.772342401389018,63.772342401389018,62.377598499648364,58.697227557863342], 3)
assert 12, eqObj(tmstdp(num2, x6, 3),take(double(), 10), 3)

assert 13, eqObj(tmstdp(num3, x1, 3), [0,9.5,16.753109164172084,14.611639196202457,13.287588193498466,12.423096769056149,17.058123924885013,16.182069552439823,16.285265627038757,15.689486925964144], 3)
assert 14, eqObj(tmstdp(num3, x2, 3),[0,0,11,11.145502331533648,11.145502331533648,11.031205736455104,11.031205736455104,10.178408519999576,10.178408519999576,9.878427675158295], 3)
assert 15, eqObj(tmstdp(num3, x3, 3),take(double(), 10), 3)
assert 16, eqObj(tmstdp(num3, x4, 3),[0,9.684500000000001,42.783764966008618,40.894291932829695,39.743624839211634,36.287436762680762,54.449262607401721,51.006335790118995,51.599367881571737,49.626473101460675], 3)
assert 17, eqObj(tmstdp(num3, x5, 3),[0,0,49.439499999999995,46.742420825912155,46.742420825912155,40.868870613065631,63.772342401389018,63.772342401389018,62.377598499648364,58.697227557863342], 3)
assert 18, eqObj(tmstdp(num3, x6, 3),take(double(), 10), 3)

assert 19, eqObj(tmstdp(num4, x1, 3),[0,9.5,16.753109164172084,14.611639196202457,13.287588193498466,12.423096769056149,17.058123924885013,16.182069552439823,16.285265627038757,15.689486925964144], 3)
assert 20, eqObj(tmstdp(num4, x2, 3),[0,0,11,11.145502331533648,11.145502331533648,11.031205736455104,11.031205736455104,10.178408519999576,10.178408519999576,9.878427675158295], 3)
assert 21, eqObj(tmstdp(num4, x3, 3),take(double(), 10), 3)
assert 22, eqObj(tmstdp(num4, x4, 3),[0,9.684500000000001,42.783764966008618,40.894291932829695,39.743624839211634,36.287436762680762,54.449262607401721,51.006335790118995,51.599367881571737,49.626473101460675], 3)
assert 23, eqObj(tmstdp(num4, x5, 3),[0,0,49.439499999999995,46.742420825912155,46.742420825912155,40.868870613065631,63.772342401389018,63.772342401389018,62.377598499648364,58.697227557863342], 3)
assert 24, eqObj(tmstdp(num4, x6, 3),take(double(), 10), 3)

assert 25, eqObj(tmstdp(num5, x1, 2),[0,9.5,20.5,12.5,4.5,6,21,19.5,5.5,3.5], 3)
assert 26, eqObj(tmstdp(num5, x2, 2),[0,0,0,12.5,0,0,0,0,0,0], 3)
assert 27, eqObj(tmstdp(num5, x3, 2),take(double(), 10), 3)
assert 28, eqObj(tmstdp(num5, x4, 2),[0,9.684500000000001,39.755000000000002,49.715000000000003,4.444999999999963,14.614999999999991,60.449999999999995,48.334999999999993,26.135000000000008,40.050000000000004], 3)
assert 29, eqObj(tmstdp(num5, x5, 2),[0,0,0,49.714999999999996,0,0,60.449999999999995,0,0.000001168007728,40.050000000000004],3)
assert 30, eqObj(tmstdp(num5, x6, 3),take(double(), 10), 3)

@testing:case="function_tmstdp_T_integer_vector_different_interval"
num1=[-5, -2, 0, 1, 4, 4, 5, 12, 13, 14]
num2=[-5, -2, 1, 4, 7, 10, 13, 15, 18, 21]
num3=[-5, -3, -1, 1, 3, 5, 7, 9, 11, 13]
num4=[-5, -1, 3, 7, 11, 11, 15, 15, 16, 16]
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,0,0,0,0,16,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,0,0,12.5,0,16,16,0,0,0])
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,25.5,20.821996915655223,17.5,15.839472494022293,16,0,0,2], 3)
assert 5, eqObj(tmstdp(num1, x1,10), [0,14.5,20.885933597094059,18.090052515125542,21.527656630483498,19.697715603592207,21.122499852053493,15.839472494022293,15.839472494022293,2], 3)
assert 6, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 7, eqObj(tmstdp(num2, x1, 3), [0.0,0,0,0,0,0,,0,,0])
assert 8, eqObj(tmstdp(num2, x1, 2), [0.0,0,0,0,0,0,,0,,0])
assert 9, eqObj(tmstdp(num2, x1, 1), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num2, x1, 4), [0,14.5,25.5,12.5,17.5,16,0,0,0,0], 1)
assert 11, eqObj(tmstdp(num2, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 12, eqObj(tmstdp(num3, x1, 3), [0,14.5,25.5,12.5,17.5,16,0,0,0,0], 1)
assert 13, eqObj(tmstdp(num3, x1, 2), [0.0,0,0,0,0,0,,0,,0])
assert 14, eqObj(tmstdp(num3, x1, 1), [0.0,0,0,0,0,0,,0,,0])
assert 15, eqObj(tmstdp(num3, x1, 4), [0,14.5,25.5,12.5,17.5,16,0,0,0,0])
assert 16, eqObj(tmstdp(num3, x1, 1024), [0,14.5,20.8859,18.090,21.52766,19.6977,19.6977,18.3570,18.3570,17.1756], 3)

assert 17, eqObj(tmstdp(num4, x1, 3), [0,0,0,0,0,16,NULL,0,0,2.0], 1)
assert 18, eqObj(tmstdp(num4, x1, 2), [0,0,0,0,0,16,NULL,0,0,2.0], 1)
assert 19, eqObj(tmstdp(num4, x1, 1), [0,0,0,0,0,16,NULL,0,NULL,0.0], 1)
assert 20, eqObj(tmstdp(num4, x1, 4), [0,0,0,0,0,16,NULL,0,0,2.0], 1)
assert 21, eqObj(tmstdp(num4, x1, 1024), [0,14.5,20.88593,18.090,21.52766,19.6977,19.6977,18.3570,18.3570,17.175564], 3)

@testing:case="function_tmstdp_T_timestamp_different_duration"
num1=timestamp([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=concatDateTime([1969.12.19, 1969.12.20, 1969.12.22, 1969.12.23, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.15], time(148952))
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,0,0,0,0,16,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,0,0,12.5,0,16,16,0,0,0])
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,25.5,20.821996915655223,17.5,15.839472494022293,16,0,0,2], 4)
assert 5, eqObj(tmstdp(num1, x1, 10), [0,14.5,20.885934,18.090053,21.527657,19.697716,21.122500,15.839472,15.839472,2], 4)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.6977,15.839472,15.839472,14.2215], 4)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.0,0,0,0,0,0,,0,,0])
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 12, eqObj(tmstdp(num1, x1, 3s), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 15, eqObj(tmstdp(num2, x1, 3d), [0.0, 14.5, 25.5, 12.5, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0], 3)
assert 16, eqObj(tmstdp(num2, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 21.311675, 15.839472, 15.839472, 2.000000], 3)
assert 17, eqObj(tmstdp(num2, x1, 1M), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.697716,18.357004,18.357004,17.175564], 3)
assert 18, eqObj(tmstdp(num2, x1, 1y), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 19, eqObj(tmstdp(num2, x1, 2B), [0,14.5,20.8859,20.822,0, 16,NULL,0,,0], 3)

@testing:case="function_tmstdp_T_date_vector_different_interval"
num1=date([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=[1969.12.19, 1969.12.20, 1969.12.22, 1969.12.23, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.15]
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,0,0,0,0,16,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,0,0,12.5,0,16,16,0,0,0])
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,25.5,20.821996915655223,17.5,15.839472494022293,16,0,0,2], 4)
assert 5, eqObj(tmstdp(num1, x1, 10), [0,14.5,20.885934,18.090053,21.527657,19.697716,21.122500,15.839472,15.839472,2], 4)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.6977,15.839472,15.839472,14.2215], 4)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.0,0,0,0,0,0,,0,,0])
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0,0,0.0,0,0,0,,0,,0])
assert 12, eqObj(tmstdp(num1, x1, 3s), [0,0,0.0,0,0,0,,0,,0])
assert 13, eqObj(tmstdp(num1, x1, 3m), [0,0,0.0,0,0,0,,0,,0])
assert 14, eqObj(tmstdp(num1, x1, 3H), [0,0,0.0,0,0,0,,0,,0])

assert 15, eqObj(tmstdp(num2, x1, 3d), [0.0, 14.5, 25.5, 12.5, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0], 3)
assert 16, eqObj(tmstdp(num2, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 21.311675, 15.839472, 15.839472, 2.000000], 3)
assert 17, eqObj(tmstdp(num2, x1, 1M), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.697716,18.357004,18.357004,17.175564], 3)
assert 18, eqObj(tmstdp(num2, x1, 1y), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 19, eqObj(tmstdp(num2, x1, 2B), [0,14.5,20.8859,20.822,0, 16,NULL,0,,0], 3)

@testing:case="function_tmstdp_T_datetime_vector_different_interval"
num1=datetime([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=datetime([1969.12.19, 1969.12.20, 1969.12.22, 1969.12.23, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.15])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,0,0,0,0,16,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,0,0,12.5,0,16,16,0,0,0])
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,25.5,20.821996915655223,17.5,15.839472494022293,16,0,0,2], 4)
assert 5, eqObj(tmstdp(num1, x1, 10), [0,14.5,20.885934,18.090053,21.527657,19.697716,21.122500,15.839472,15.839472,2], 4)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.6977,15.839472,15.839472,14.2215], 4)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.0,0,0,0,0,0,,0,,0])
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0,0,0.0,0,0,0,,0,,0])
assert 12, eqObj(tmstdp(num1, x1, 3s), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 15, eqObj(tmstdp(num2, x1, 3d), [0.0, 14.5, 25.5, 12.5, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0], 3)
assert 16, eqObj(tmstdp(num2, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 21.311675, 15.839472, 15.839472, 2.000000], 3)
assert 17, eqObj(tmstdp(num2, x1, 1M), [0,14.5,20.885934,18.090053,21.527657,19.697716,,0,,0], 3)
assert 18, eqObj(tmstdp(num2, x1, 1y), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 19, eqObj(tmstdp(num2, x1, 2B), [0,14.5,20.8859,20.822,0, 16,NULL,0,,0], 3)

@testing:case="function_tmstdp_T_time_vector_different_interval"
num1=time([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,1.5,0], 3)
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,14.5,0,0,17.5,0,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,14.5,0,0,17.5,15.839472,0,1.5,0,0], 2)
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,14.7733,2], 3)
assert 5, eqObj(tmstdp(num1, x1,10), [0,14.5,20.885934,18.0901,21.52765663,19.69772,21.3117,19.106,19.106,13.3955], 3)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.0901,21.52765663,19.69772,19.69772,18.357,19.106,13.3955], 3)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.0,0,0,0,0,0,,0,,0])
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,1.5,0], 3)
assert 12, eqObj(tmstdp(num1, x1, 3s), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 15, eqObj(tmstdp(num1, x1, 3d), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 16, eqObj(tmstdp(num1, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

@testing:case="function_tmstdp_T_month_vector_different_interval"
num1=month([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,1.5,0], 3)
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,14.5,0,0,17.5,0,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,14.5,0,0,17.5,15.839472,0,1.5,0,0], 2)
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,14.7733,2], 3)
assert 5, eqObj(tmstdp(num1, x1,10), [0,14.5,20.885934,18.0901,21.52765663,19.69772,21.3117,19.106,19.106,13.3955], 3)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.0901,21.52765663,19.69772,19.69772,18.357,19.106,13.3955], 3)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.0,0,0,0,0,0,,0,,0])
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0.0,0,0,0,0,0,,0,,0])
assert 12, eqObj(tmstdp(num1, x1, 3s), [0.0,0,0,0,0,0,,0,,0])
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.0,0,0,0,0,0,,0,,0])
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.0,0,0,0,0,0,,0,,0])

assert 15, eqObj(tmstdp(num1, x1, 3d), [0.0,0,0,0,0,0,,0,,0])
assert 16, eqObj(tmstdp(num2, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 21.311675, 15.839472, 15.839472, 2.000000], 3)
assert 17, eqObj(tmstdp(num2, x1, 1M), [0,14.5,20.885934,18.090053,21.527657,19.697716,,0,,0], 3)
assert 18, eqObj(tmstdp(num2, x1, 1y), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 19, eqObj(tmstdp(num2, x1, 2B), [0,14.5,20.8859,20.822,0, 16,NULL,0,,0], 3)

@testing:case="function_tmstdp_T_minute_vector_different_interval"
num1=minute([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,1.5,0], 3)
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,14.5,0,0,17.5,0,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,14.5,0,0,17.5,15.839472,0,1.5,0,0], 2)
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,14.7733,2], 3)
assert 5, eqObj(tmstdp(num1, x1,10), [0,14.5,20.885934,18.0901,21.52765663,19.69772,21.3117,19.106,19.106,13.3955], 3)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.0901,21.52765663,19.69772,19.69772,18.357,19.106,13.3955], 3)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0.0,0,0,0,0,0,,0,,0])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.0,0,0,0,0,0,,0,,0])
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0.0,0,0,0,0,0,,0,,0])
assert 12, eqObj(tmstdp(num1, x1, 3s), [0.0,0,0,0,0,0,,0,,0])
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.000000, 14.500000, 20.885934, 0, 17.5, 15.8395, 15.8395, 14.7733, 1.5, 0], 4)
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 15, eqObj(tmstdp(num1, x1, 3d), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 16, eqObj(tmstdp(num1, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

@testing:case="function_tmstdp_T_nanotime_vector_different_interval"
num1=nanotime([1, 1, 3, 9, 9, 10, 11, 11, 12, 14])
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,1.5,0], 3)
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,14.5,0,0,17.5,0,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,14.5,0,0,17.5,15.839472,0,1.5,0,0], 2)
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,20.885934,0,17.5,15.839472,15.8395,14.7733,14.7733,2], 3)
assert 5, eqObj(tmstdp(num1, x1,10), [0,14.5,20.885934,18.0901,21.52765663,19.69772,21.3117,19.106,19.106,13.3955], 3)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.0901,21.52765663,19.69772,19.69772,18.357,19.106,13.3955], 3)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0,14.5,20.8859,0,17.5,15.8395,15.8395,14.7733,1.5,0],3)
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 12, eqObj(tmstdp(num1, x1, 3s), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 15, eqObj(tmstdp(num1, x1, 3d), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 16, eqObj(tmstdp(num1, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

@testing:case="function_tmstdp_T_nanotimestamp_different_duration"
num1=nanotimestamp([-5, -2, 0, 1, 4, 4, 5, 12, 13, 14])
num2=concatDateTime([1969.12.19, 1969.12.20, 1969.12.22, 1969.12.23, 1969.12.31, 1970.01.01, 1970.01.03, 1970.01.06, 1970.01.08, 1970.01.15], nanotime(148952))
x1=[52,23,74,49,14,46,NULL,49,NULL,45]

assert 1, eqObj(tmstdp(num1, x1, 3), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 2, eqObj(tmstdp(num1, x1, 1), [0.0,0,0,0,0,16,,0,,0])
assert 3, eqObj(tmstdp(num1, x1, 2), [0,0,0,12.5,0,16,16,0,0,0])
assert 4, eqObj(tmstdp(num1, x1, 4), [0,14.5,25.5,20.821996915655223,17.5,15.839472494022293,16,0,0,2], 4)
assert 5, eqObj(tmstdp(num1, x1, 10), [0,14.5,20.885934,18.090053,21.527657,19.697716,21.122500,15.839472,15.839472,2], 4)
assert 6, eqObj(tmstdp(num1, x1, 11), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.6977,15.839472,15.839472,14.2215], 4)
assert 7, eqObj(tmstdp(num1, x1, 1024), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 9, eqObj(tmstdp(num1, x1, 3ns), [0,0,25.5,12.5,0,16,16,0,0,2])
assert 10, eqObj(tmstdp(num1, x1, 3us), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 11, eqObj(tmstdp(num1, x1, 3ms), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 12, eqObj(tmstdp(num1, x1, 3s), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 13, eqObj(tmstdp(num1, x1, 3m), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 14, eqObj(tmstdp(num1, x1, 3H), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)

assert 15, eqObj(tmstdp(num2, x1, 3d), [0.0, 14.5, 25.5, 12.5, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0], 3)
assert 16, eqObj(tmstdp(num2, x1, 2w), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 21.311675, 15.839472, 15.839472, 2.000000], 3)
assert 17, eqObj(tmstdp(num2, x1, 1M), [0,14.5,20.885934,18.090053,21.527657,19.697716,19.697716,18.357004,18.357004,17.175564], 3)
assert 18, eqObj(tmstdp(num2, x1, 1y), [0.000000, 14.500000, 20.885934, 18.090053, 21.527657, 19.697716, 19.697716, 18.357004, 18.357004, 17.175564], 4)
assert 19, eqObj(tmstdp(num2, x1, 2B), [0,14.5,20.8859,20.822,0, 16,NULL,0,,0], 3)

@testing:case="function_tmstdp_vector_all_NULL_1028"
def f1(datatype1,datatype2) {
	x = take(int(), 1028)
	return tmstdp(datatype1(1..1028),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmstdp_vector_all_NULL>2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048580)
	return tmstdp(datatype1(1..1048580),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048580)
	return tmstdp(datatype1(rand(100,1048580).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_vector_all_NULL_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	return tmstdp(datatype1(1..3000000),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	return tmstdp(datatype1(rand(100,3000000).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_NULL_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1028)
	x = subarray(x,0:1028)
	return tmstdp(datatype1(1..1028),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_NULL_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048580)
	x = subarray(x,0:1048580)
	return tmstdp(datatype1(1..1048580),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048580)
	x = subarray(x,0:1048580)
	return tmstdp(datatype1(rand(100,1048580).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_NULL_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	return tmstdp(datatype1(1..3000000),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	return tmstdp(datatype1(rand(100,3000000).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_bigarray_all_NULL_1024"
def f1(datatype1,datatype2) {
	n = 2000000
	x = take(int(), 1028)
	x = bigarray(int,0,n*10).append!(x)
	return tmstdp(datatype1(1..1028),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmstdp_bigarray_all_NULL_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048580)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	return tmstdp(datatype1(1..1048580),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048580)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	return tmstdp(datatype1(rand(100,1048580).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_NULL_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	return tmstdp(datatype1(1..3000000),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	return tmstdp(datatype1(rand(100,3000000).sort()),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_vector_all_same_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1028)
	T = take(1,1028)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmstdp_vector_all_same_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048580)
	T = take(1,1048580)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048580)
	T = take(1,1048580)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_vector_all_same_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	T = take(1,3000000)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	T = take(1,3000000)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_same_1024"
def f1(datatype1,datatype2) {
	x = take(int(), 1028)
	x = subarray(x,0:1028)
	T = take(1,1028)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_same_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048580)
	x = subarray(x,0:1048580)
	T = take(1,1048580)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048580)
	x = subarray(x,0:1048580)
	T = take(1,1048580)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_same_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	T = take(1,3000000)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	x = subarray(x,0:3000000)
	T = take(1,3000000)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_bigarray_all_same_1024"
def f1(datatype1,datatype2) {
	n = 2000000
	x = take(int(), 1028)
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,1028)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, short, long, date, time, second, minute, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

@testing:case="function_tmstdp_bigarray_all_same_2^20"
def f1(datatype1,datatype2) {
	x = take(int(), 1048580)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,1048580)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 1048580)
	n = 2000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,1048580)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_subarray_all_same_3000000"
def f1(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,3000000)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 1, cross(f1,[int, long, date, time, timestamp, nanotimestamp, nanotime, datetime, datehour, month],[char, int, short, long, float, double])

def f2(datatype1,datatype2) {
	x = take(int(), 3000000)
	n = 3000000
	x = bigarray(int,0,n*10).append!(x)
	T = take(1,3000000)
	return tmstdp(datatype1(T),datatype2(x), 3)==NULL
}
assert 2, cross(f2,[short, second, minute],[char, int, short, long, float, double])

@testing:case="function_tmstdp_all_datatypes"
def checkResult(dtype1, dtype2, T, x, window, expected1){
	re=tmstdp(dtype1(T), dtype2(x), window)
	return eqObj(re, expected1, 2)
}
datatypes1=[int, short, long, date, datehour, timestamp]
datatypes2=[char, int, short, long, float, double]
datatypes3=[minute, second, nanotimestamp, nanotime, time, month]

T1= 1..10
x1=7 10 2 6 11 25 69 80 17 12
x2=7 NULL 2 6 11 NULL 69 80 17 12
x3=take(double(),10)
expected1=[0,1.5,3.29983,3.26599,3.6818,8.042,24.711,23.763,27.4752,30.944]
expected2=[0, 0, 2.5, 2, 3.6818, 2.5, 29, 5.5, 27.4752, 30.9444]
expected3=take(double(),10)
assert 1, loop(checkResult{, , T1, x1, 3, expected1}, datatypes1, datatypes2).flatten()
assert 2, loop(checkResult{, , T1, x1, 3, expected1}, datatypes3, datatypes2).flatten()
assert 3, loop(checkResult{, , T1, x2, 3, expected2}, datatypes1, datatypes2).flatten()
assert 4, loop(checkResult{, , T1, x2, 3, expected2}, datatypes3, datatypes2).flatten()
assert 5, loop(checkResult{, , T1, x3, 3, expected3}, datatypes1, datatypes2).flatten()
assert 6, loop(checkResult{, , T1, x3, 3, expected3}, datatypes3, datatypes2).flatten()

T2= [-5, -2, -1, 0, 1, 10, 10, 11, 15, 17]
x1=7 10 2 6 11 25 69 80 17 12
x2=7 NULL 2 6 11 NULL 69 80 17 12
x3=take(double(),10)
expected1=[0, 0, 4, 3.26599, 3.6818, 0, 22, 23.763, 0, 2.5]
expected2=[0.0, 0, 0, 0, 0, 0, 22.0, 0, 0, 0]
expected3=[0.0, 0, 4, 2, 2.5, 0, 22.0, 23.7627, 0, 0]
expected4=[0,1.5, 3.2998, 2.8614, 3.1875, 7.2438, 21.6522, 28.6869, 27.202, 26.1092]
expected5=[0,,0,2,3.682,,0,5.5,0,2.5]
expected6=[0,,0,0,0,,0,0,0,0.0]
expected7=[0,,0,2,2.5,,0,5.5,0,0]
expected8=[0,0,2.5,2.160246899469287,3.201562118716424,3.201562118716424,25.163465580082565,32.318295472104068,30.222305588787243,28.727164844446448]
expected9=take(double(),10)
assert 7, loop(checkResult{, , T2, x1, 3, expected1}, datatypes1, datatypes2).flatten()
assert 8, loop(checkResult{, , T2, x1, 1, expected2}, datatypes1, datatypes2).flatten()
assert 9, loop(checkResult{, , T2, x1, 2, expected3}, datatypes1, datatypes2).flatten()
assert 10, loop(checkResult{, , T2, x1, 1024, expected4}, datatypes1, datatypes2).flatten()
assert 11, loop(checkResult{, , T2, x2, 3, expected5}, datatypes1, datatypes2).flatten()
assert 12, loop(checkResult{, , T2, x2, 1, expected6}, datatypes1, datatypes2).flatten()
assert 13, loop(checkResult{, , T2, x2, 2, expected7}, datatypes1, datatypes2).flatten()
assert 14, loop(checkResult{, , T2, x2, 1024, expected8}, datatypes1, datatypes2).flatten()
assert 15, loop(checkResult{, , T2, x3, 3, expected9}, datatypes1, datatypes2).flatten()
assert 16, loop(checkResult{, , T2, x3, 1, expected9}, datatypes1, datatypes2).flatten()
assert 17, loop(checkResult{, , T2, x3, 2, expected9}, datatypes1, datatypes2).flatten()
assert 18, loop(checkResult{, , T2, x3, 1024, expected9}, datatypes1, datatypes2).flatten()

@testing:case="function_tmstdp_array_random_T_1028"
def checkTmstdp(T, num, siz, window){
	expected=array(double, 0)
	for (i in 0..(siz-1)){
		arr=array(double, 0)
		for(j in 0..i){
			if(T[i] - T[j] < window){
				arr.append!(num[j])
			}
		}
		//print(arr)
		expected.append!(stdp(arr))
	}
	return expected
}

T=rand(1024, 1028).sort()
num=take([98,24,96,66,26,87,98,75,63,49],1028)
siz=size(T)
window=3
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)
///////////////////////////////////////////////////////////////////////////////////////////////////////////
window=1023
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 2)

window=1
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmstdp_array_random_T_timstamp_1024"
T=rand(1969.12.31T23:59:57.123 +1..200000, 1024).sort()
num=take([98,24,96,66,26,87,100,75,63,49],1024)
siz=size(T)
window=3
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmstdp_array_random_T_date_1024"
T=rand(1969.01.01+1..200000, 1024).sort()
num=take([98,24,96,66,26,87,100,75,63,49],1024)
siz=size(T)
window=3
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 5, eqObj(re, ex, 3)


@testing:case="function_tmstdp_subarray_random_T_1028"
def checkTmstdp(T, num, siz, window){
	expected=array(double, 0)
	for (i in 0..(siz-1)){
		arr=array(double, 0)
		for(j in i..0){
			if(T[i] - T[j] < window){
				arr.append!(num[j])
			}
		}
		expected.append!(stdp(arr))
	}
	return expected
}

T=rand(1024, 1028).sort()
T=subarray(T,0:1028)
num=take([98,24,96,66,26,87,98,75,63,49],1028)
num=subarray(num,0:1028)
siz=size(T)
window=3
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checkTmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmstdp_subarray_random_T_timstamp_1024"
T=rand(1969.12.31T23:59:57.123 +1..200000, 1024).sort()
T=subarray(T,0:1024)
num=take([98,24,96,66,26,87,100,75,63,49],1024)
num=subarray(num,0:1024)
siz=size(T)
window=3
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 5, eqObj(re, ex, 3)

@testing:case="function_tmstdp_subarray_random_T_date_1024"
T=rand(1969.01.01+1..200000, 1024).sort()
T=subarray(T,0:1024)
num=take([98,24,96,66,26,87,100,75,63,49],1024)
num=subarray(num,0:1024)
siz=size(T)
window=3
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 1, eqObj(re, ex, 3)

window=1024
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 2, eqObj(re, ex, 3)

window=1023
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 3, eqObj(re, ex, 3)

window=1
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 4, eqObj(re, ex, 3)

window=1025
ex=checktmstdp(T, num, siz, window)
re=tmstdp(T, num, window)
assert 5, eqObj(re, ex, 3)

/*
@testing:case="function_tmstdp_T_1048576"
arr=array(int,0)
for (i in 1..1048576){
	if(i % 2 == 0){
		arr.append!(i)
	}
}
T=take(arr, 1048576).sort()
num=take([98,24,96,66,26,87,98,75,63,49],1048576)
ex=[0, 37,34.4222,29.95,28.6744,26.9757,31.6684,27.50,14.522,17.97741] join (take([20.61, 26.74,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741], 1048566))
assert 1, eqObj(tmstdp(T, num, 3), ex, 2)

T=take(arr, 1048576).sort()
T=subarray(T,0:1048576)
num=take([98,24,96,66,26,87,98,75,63,49],1048576)
num=subarray(num,0:1048576)
ex=[0, 37,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741] join (take([20.61, 26.74,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741], 1048566))
assert 2, eqObj(tmstdp(T, num, 3), ex, 2)

T=take(arr, 1048576).sort()
T=bigarray(int,0,n*10).append!(T)
num=take([98,24,96,66,26,87,98,75,63,49],1048576)
num=bigarray(int,0,n*10).append!(num)
ex=[0, 37,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741] join (take([20.61, 26.74,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741], 1048566))
assert 3, eqObj(tmstdp(T, num, 3), ex, 2)

@testing:case="function_tmstdp_T_3000000"
arr=array(int,0)
for (i in 1..3000000){
	if(i % 2 == 0){
		arr.append!(i)
	}
}
T=take(arr, 3000000).sort()
num=take([98,24,96,66,26,87,98,75,63,49],3000000)
ex=[0, 37,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741] join (take([20.61, 26.74,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741], 1048566))
assert 1, eqObj(tmstdp(T, num, 3), ex, 2)

T=take(arr, 3000000).sort()
T=subarray(T,0:3000000)
num=take([98,24,96,66,26,87,98,75,63,49],3000000)
num=subarray(num,0:3000000)
ex=[0, 37,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741] join (take([20.61, 26.74,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741], 1048566))
assert 2, eqObj(tmstdp(T, num, 3), ex, 2)

T=take(arr, 3000000).sort()
T=bigarray(int,0,n*10).append!(T)
num=take([98,24,96,66,26,87,98,75,63,49],3000000)
num=bigarray(int,0,n*10).append!(num)
ex=[0, 37,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741] join (take([20.61, 26.74,34.42,29.95,28.6744,26.98,31.6684,27.50,14.522,17.97741], 1048566))
assert 3, eqObj(tmstdp(T, num, 3), ex, 2)

*/

@testing:case="function_tmstdp_table_prepare_value_small_data"
dbName = "dfs://test_tmstdp"
if(existsDatabase(dbName)){
	dropDatabase(dbName)
}
t = table(1:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
db = database(directory=dbName, partitionType=VALUE, partitionScheme=2020.01.01..2020.02.20)
pt = db.createPartitionedTable(table=t, tableName=`pt, partitionColumns=`timestamp)
dt = db.createTable(table=t, tableName=`dt)

n = 1000
exTable = table(n:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
dataTable = table(take(`A`B`C`D`E, n) as symbol, rand("name" + string(1..10), n) as name, rand(1..n, n) as id, rand(rand(100.0f,1000) join take(float(),100),n) as price1, rand(rand(100.0,1000) join take(double(),100),n) as price2, take(temporalAdd(2020.01.01T12:23:24.345, (1..n), `h), n) as timestamp, take(2020.01.01 + 1..50, n).sort() as date)

exTable.append!(dataTable)
pt.append!(dataTable)
dt.append!(dataTable)

@testing:case="function_tmstdp_dfs_table"
re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3s) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3y) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3m) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2ms) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(date, ID, 3d) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_dt_table"
re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3s) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3y) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3m) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2ms) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(date, ID, 3d) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_dfs_table_context_by"
re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3d) as tmstdp from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 2B) as tmstdp from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3H) as tmstdp from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3M) as tmstdp from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_dt_table_context_by"
re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3d) as tmstdp from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 2B) as tmstdp from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3H) as tmstdp from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3M) as tmstdp from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_table_prepare_value_bigdata_data"
dbName = "dfs://test_tmstdp_big_data"
if(existsDatabase(dbName)){
	dropDatabase(dbName)
}
t = table(1:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
db = database(directory=dbName, partitionType=VALUE, partitionScheme=2020.01.01..2020.02.20)
pt = db.createPartitionedTable(table=t, tableName=`pt, partitionColumns=`timestamp)
dt = db.createTable(table=t, tableName=`dt)

n = 1048580
exTable = table(n:0, [`symbol, `name, `ID, `price1, `price2, `timestamp, `date], [SYMBOL, STRING, INT, FLOAT, DOUBLE, TIMESTAMP, DATE])
dataTable = table(take(`A`B`C`D`E, n) as symbol, rand("name" + string(1..10), n) as name, rand(1..n, n) as id, rand(rand(100.0f,1000) join take(float(),100),n) as price1, rand(rand(100.0,1000) join take(double(),100),n) as price2, take(temporalAdd(2020.01.01T12:23:24.345, (1..1000), `h), n).sort() as timestamp, take(2020.01.01 + 1..50, n).sort() as date)

exTable.append!(dataTable)
pt.append!(dataTable)
dt.append!(dataTable)

@testing:case="function_tmstdp_dfs_table_bigdata"
re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3s) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3y) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3m) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2ms) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(date, ID, 3d) as tmstdp from loadTable(dbName, `pt)
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_dt_table_bigdata"
re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3H) from ex
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3d) from ex
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3s) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3s) from ex
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3y) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3y) from ex
assert 4, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3M) from ex
assert 5, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3m) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3m) from ex
assert 6, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 2B) from ex
assert 7, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2ms) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 2ms) from ex
assert 8, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(date, ID, 3d) as tmstdp from loadTable(dbName, `dt)
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(date, ID, 3d) from ex
assert 9, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_dfs_table_context_by_bigdata"
re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3d) as tmstdp from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 2B) as tmstdp from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3H) as tmstdp from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `pt) context by symbol
ex=select * from loadTable(dbName, `pt)
ex=select tmstdp(timestamp, ID, 3M) as tmstdp from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)

@testing:case="function_tmstdp_dt_table_context_by_bigdata"
re=select tmstdp(timestamp, ID, 3d) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3d) as tmstdp from ex context by symbol
assert 1, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 2B) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 2B) as tmstdp from ex context by symbol
assert 2, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3H) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3H) as tmstdp from ex context by symbol
assert 3, eqObj(re.values(), ex.values(), 3)

re=select tmstdp(timestamp, ID, 3M) as tmstdp from loadTable(dbName, `dt) context by symbol
ex=select * from loadTable(dbName, `dt)
ex=select tmstdp(timestamp, ID, 3M) as tmstdp from ex context by symbol
assert 4, eqObj(re.values(), ex.values(), 3)
/**
@testing:case="function_tmstdp_compare_with_python"
t=loadText(DATA_DIR+ "USPrices_FIRST.csv")
ex=loadText(DATA_DIR+ "TMSTDP.csv")
re=select tmstdp(date, ASKHI, 10) as tmstdp from t 
ex=select ASKHI from ex
assert 1, eqObj(re.values(), ex.values(), 3)














